{"version":3,"sources":["utils/util.js","components/Charts/LineChart.js","components/Charts/DonutChart.js","components/Charts/TestedChart.js","components/Table/Table.js","components/InfoBox/InfoBox.js","components/ProgressBars/ProgressBars.js","components/Map/Map.js","components/PlaceholderComment/PlaceholderComment.js","assets/covid-19.svg","pages/Dashboard/chartTheme.js","pages/Dashboard/Dashboard.js","services/covidData.api.js"],"names":["stringToDate","_date","_format","_delimiter","formatItems","toLowerCase","split","dateItems","monthIndex","indexOf","dayIndex","yearIndex","month","parseInt","Date","am4core","am4themes_animated","LineChart","_ref","casesInfo","casesChart","useRef","Tooltip","_ref2","name","value","React","createElement","useLayoutEffect","x","am4charts","casesData","map","d","date","dateymd","dailyconfirmed","dailydeceased","dailyrecovered","totalconfirmed","totaldeceased","totalrecovered","data","dateAxis","xAxes","push","renderer","grid","template","location","tooltipDateFormat","valueAxis","yAxes","tooltip","disabled","minWidth","numberFormatter","numberFormat","fillModifier","opacities","offsets","gradient","rotation","seriesConfirmed","series","dataFields","dateX","valueY","stroke","fill","tooltipHTML","renderToStaticMarkup","strokeWidth","fillOpacity","segments","seriesRecovered","seriesDeceased","cursor","scrollbarX","legend","current","dispose","Fragment","className","id","style","width","height","DonutChart","selectedStateInfo","colorPalette","donutChart","stateData","type","count","confirmed","color","active","recovered","deaths","innerRadius","pieSeries","category","slices","propertyFields","alignLabels","labels","text","fontSize","centerLabel","createChild","state","truncate","maxWidth","wrap","horizontalCenter","verticalCenter","states","getKey","properties","scale","valueLabels","align","textAlign","useDefaultMarker","marker","markers","children","getIndex","cornerRadius","valign","horizontalAlign","dataSource","updateCurrentData","Popup","content","on","popper","zIndex","trigger","Icon","hideOnScroll","lastupdatedtime","TestedChart","testSeriesInfo","testedChart","timelineData","slice","testedasof","firstdoseadministered","seconddoseadministered","totaldosesadministered","seriesFirstDose","seriesSecondDose","seriesTotalDose","tableReducer","action","column","reverse","direction","_","sortBy","Error","StatewiseTable","statewiseInfo","handleHover","tableData","filter","statecode","dispatch","useReducer","overflow","margin","Table","sortable","celled","selectable","fixed","singleLine","unstackable","compact","Header","Row","HeaderCell","sorted","onClick","backgroundColor","shadeLight","Body","key","Cell","onMouseOver","onMouseOut","StyledCard","styled","Card","$color","shadeDark","_ref3","InfoBox","_ref4","title","total","fluid","isFinite","CountUp","end","Number","duration","separator","StyledProgressBar","Progress","props","ProgressBars","percentArr","arr","sum","v","reduce","a","b","toFixed","numbersToPercentage","percent","progress","caseTypeOptions","Map","caseType","setCaseType","useState","mapRef","lastUpdateRef","statecodes","am4maps","s","geodata","am4geodata_india2020High","projection","Mercator","polygonSeries","useGeodata","heatRules","property","target","mapPolygons","min","max","logarithmic","polygonTemplate","tooltipText","nonScalingStroke","create","heatLegend","isNaN","dataItem","hideTooltip","innerText","dataContext","showTooltipAt","orientation","marginRight","opposite","dx","strictMinMax","events","event","console","log","ref","toUpperCase","float","onChange","e","PlaceholderComment","num","placeholderComments","Array","from","i","Placeholder","Line","length","chartTheme","first","second","third","fourth","fifth","Dashboard","setStatewiseInfo","setSelectedStateInfo","setCasesInfo","setTestSeriesInfo","setColorPalette","loading","setLoading","async","getInfo","result","Promise","allSettled","fetch","then","response","ok","json","process","results","result1","result2","status","cases_time_series","statewise","tested","error","useEffect","timerId","clearTimeout","setTimeout","find","changeTheme","themeName","src","covidLogo","alt","marginBottom","href","Button","animated","primary","as","Link","to","Content","visible","hidden","Label","Group","circular","marginTop","FaPalette","Grid","stackable","verticalAlign","padded","centered","columns","Column","Segment","raised","PlaceholderImage","LazyLoad","Divider","horizontal","rootMargin","role"],"mappings":"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","file":"static/js/8.089807b4.chunk.js","sourcesContent":["export function stringToDate(_date, _format, _delimiter) {\n  let formatLowerCase = _format.toLowerCase();\n  let formatItems = formatLowerCase.split(_delimiter);\n  let dateItems = _date.split(_delimiter);\n  let monthIndex = formatItems.indexOf(\"mm\");\n  let dayIndex = formatItems.indexOf(\"dd\");\n  let yearIndex = formatItems.indexOf(\"yyyy\");\n  let month = parseInt(dateItems[monthIndex]);\n  month -= 1;\n  let formatedDate = new Date(dateItems[yearIndex], month, dateItems[dayIndex]);\n  return formatedDate;\n}\n\nexport function numbersToPercentage(arr) {\n  let sum = arr.map((v) => parseInt(v)).reduce((a, b) => a + b, 0);\n  let percentArr = arr.map((v) => {\n    return ((v * 100) / sum).toFixed(1);\n  });\n  return percentArr;\n}\n","import React, { useRef, useLayoutEffect } from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { stringToDate } from \"./../../utils/util\";\n\n/* Enable theme(s) */\nam4core.useTheme(am4themes_animated);\n\nfunction LineChart({ casesInfo }) {\n  const casesChart = useRef(null);\n\n  function Tooltip({ name, value }) {\n    return (\n      <div>\n        {name}: {value}\n      </div>\n    );\n  }\n\n  useLayoutEffect(() => {\n    let x = am4core.create(\"casesChartDiv\", am4charts.XYChart);\n    // data\n    const casesData = casesInfo.map((d) => {\n      //.slice(-365) to show for past 365 days\n      return {\n        date: stringToDate(d.dateymd, \"yyyy-MM-dd\", \"-\"),\n        dailyconfirmed: d.dailyconfirmed,\n        dailydeceased: d.dailydeceased,\n        dailyrecovered: d.dailyrecovered,\n        totalconfirmed: d.totalconfirmed,\n        totaldeceased: d.totaldeceased,\n        totalrecovered: d.totalrecovered,\n      };\n    });\n    x.data = casesData;\n\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    dateAxis.tooltipDateFormat = \"MMM dd, yyyy\";\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    valueAxis.numberFormatter.numberFormat = \"#,###.a\";\n\n    // Gradient\n    let fillModifier = new am4core.LinearGradientModifier();\n    fillModifier.opacities = [1, 0.1];\n    fillModifier.offsets = [0, 0.5, 1];\n    fillModifier.gradient.rotation = 90;\n    // confirmed\n    let seriesConfirmed = x.series.push(new am4charts.LineSeries());\n    seriesConfirmed.name = \"Confirmed\";\n    seriesConfirmed.dataFields.dateX = \"date\";\n    seriesConfirmed.dataFields.valueY = \"dailyconfirmed\";\n    seriesConfirmed.stroke = `#db2828`;\n    seriesConfirmed.fill = `#db2828`;\n\n    seriesConfirmed.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"Confirmed\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesConfirmed.strokeWidth = 3;\n    seriesConfirmed.fillOpacity = 0.3;\n    seriesConfirmed.segments.template.fillModifier = fillModifier;\n\n    // Recovered\n    let seriesRecovered = x.series.push(new am4charts.LineSeries());\n    seriesRecovered.name = \"Recovered\";\n    seriesRecovered.dataFields.dateX = \"date\";\n    seriesRecovered.dataFields.valueY = \"dailyrecovered\";\n    seriesRecovered.stroke = `#21ba45`;\n    seriesRecovered.fill = `#21ba45`;\n\n    seriesRecovered.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"Recovered\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesRecovered.strokeWidth = 3;\n    seriesRecovered.fillOpacity = 0.3;\n    seriesRecovered.segments.template.fillModifier = fillModifier;\n\n    // Deceased\n    let seriesDeceased = x.series.push(new am4charts.LineSeries());\n    seriesDeceased.name = \"Deceased\";\n    seriesDeceased.dataFields.dateX = \"date\";\n    seriesDeceased.dataFields.valueY = \"dailydeceased\";\n    seriesDeceased.stroke = `#767676`;\n    seriesDeceased.fill = `#767676`;\n    seriesDeceased.strokeWidth = 3;\n    seriesDeceased.fillOpacity = 0.3;\n\n    seriesDeceased.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"Deceased\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesDeceased.segments.template.fillModifier = fillModifier;\n\n    x.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(seriesConfirmed);\n    scrollbarX.series.push(seriesRecovered);\n    scrollbarX.series.push(seriesDeceased);\n    x.scrollbarX = scrollbarX;\n    // Pre Zoom\n    // x.events.on('ready', function () {\n    //    dateAxis.zoomToDates(\n    //       new Date().setMonth(new Date().getMonth() - 6), // 6 months ago\n    //       new Date(),\n    //       false,\n    //       true // this makes zoom instant\n    //    );\n    // });\n    // Legends\n    x.legend = new am4charts.Legend();\n\n    casesChart.current = x;\n\n    return () => {\n      x.dispose();\n    };\n  }, [casesInfo]);\n\n  return (\n    <>\n      <span className=\"ui red ribbon label\">Cases Timeline Series</span>\n      <div className=\"ui horizontal divider\">Cases Timeline Series</div>\n      <div\n        id=\"casesChartDiv\"\n        style={{ width: \"100%\", height: \"500px\" }}\n      ></div>\n    </>\n  );\n}\n\nexport default LineChart;\n","import React, { useRef, useLayoutEffect } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { Popup, Icon } from \"semantic-ui-react\";\n\n/* Enable theme(s) */\nam4core.useTheme(am4themes_animated);\n\nfunction DonutChart({ selectedStateInfo, colorPalette }) {\n  const donutChart = useRef(null);\n\n  useLayoutEffect(() => {\n    // Create chart instance\n    let x = am4core.create(\"donutChartDiv\", am4charts.PieChart);\n    const stateData = [\n      {\n        type: \"Confirmed\",\n        count: selectedStateInfo.confirmed,\n        color: am4core.color(`${colorPalette.confirmed.color}`),\n      },\n      {\n        type: \"Active\",\n        count: selectedStateInfo.active,\n        color: am4core.color(`${colorPalette.active.color}`),\n      },\n      {\n        type: \"Recovered\",\n        count: selectedStateInfo.recovered,\n        color: am4core.color(`${colorPalette.recovered.color}`),\n      },\n      {\n        type: \"Deaths\",\n        count: selectedStateInfo.deaths,\n        color: am4core.color(`${colorPalette.deaths.color}`),\n      },\n    ];\n    x.data = stateData;\n    // radius\n    x.innerRadius = am4core.percent(50);\n    // Add and configure Series\n    let pieSeries = x.series.push(new am4charts.PieSeries());\n    pieSeries.dataFields.value = \"count\";\n    pieSeries.dataFields.category = \"type\";\n    pieSeries.slices.template.propertyFields.fill = \"color\";\n    // labels\n    pieSeries.alignLabels = false;\n    pieSeries.labels.template.text = \"{value.formatNumber('#,###.a')}\";\n    pieSeries.labels.template.fontSize = \"0.7em\";\n    // pieSeries.labels.template.wrap = true;\n    //x.radius = am4core.percent(50);\n    // Center Label\n    let centerLabel = pieSeries.createChild(am4core.Label);\n    centerLabel.text = `${selectedStateInfo.state}`;\n    centerLabel.truncate = true;\n    centerLabel.maxWidth = 120;\n    centerLabel.wrap = true;\n    centerLabel.fontSize = \"1em\";\n    centerLabel.horizontalCenter = \"middle\";\n    centerLabel.verticalCenter = \"middle\";\n    // Set up fills\n    pieSeries.slices.template.fillOpacity = 1;\n    // hover effect\n    pieSeries.slices.template.states.getKey(\"hover\").properties.scale = 1;\n    pieSeries.slices.template.states.getKey(\"hover\").properties.fillOpacity = 0.5;\n\n    // legend\n    x.legend = new am4charts.Legend();\n    x.legend.fontSize = 12;\n    x.legend.valueLabels.template.fontSize = 12;\n    x.legend.valueLabels.template.align = \"right\";\n    x.legend.valueLabels.template.textAlign = \"start\";\n    // Marker\n    x.legend.useDefaultMarker = true;\n    let marker = x.legend.markers.template.children.getIndex(0);\n    marker.cornerRadius(12, 12, 12, 12);\n    marker.stroke = am4core.color(\"#fff\");\n    marker.valign = \"middle\";\n    marker.horizontalAlign = \"center\";\n    marker.height = 12;\n    marker.width = 12;\n\n    // Updating\n    x.dataSource.updateCurrentData = true;\n\n    donutChart.current = x;\n    return () => {\n      x.dispose();\n    };\n  }, [selectedStateInfo, colorPalette]);\n\n  return (\n    <>\n      <div className=\"ui red ribbon label\">\n        Donut Chart &nbsp;&nbsp;\n        <Popup\n          content={\n            <>\n              <b>Hover/Click</b> a slice to see details.\n              <br /> <b>Toggle</b> a field by clicking it's legend.\n            </>\n          }\n          on={[\"hover\", \"click\"]}\n          popper={{\n            id: \"donut-popper-container\",\n            style: { zIndex: 2000 },\n          }}\n          trigger={<Icon name=\"info circle\" />}\n          hideOnScroll\n        />\n      </div>\n      <div className=\"ui top right attached label\">\n        Last Updated: <div className=\"detail\">{selectedStateInfo.lastupdatedtime}</div>\n      </div>\n\n      <div className=\"ui horizontal divider\">{selectedStateInfo.state}</div>\n\n      <div\n        id=\"donutChartDiv\"\n        style={{ height: \"430px\" }}\n      />\n    </>\n  );\n}\n\nexport default DonutChart;\n","import React, { useRef, useLayoutEffect } from \"react\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { stringToDate } from \"./../../utils/util\";\n\n/* Enable theme(s) */\nam4core.useTheme(am4themes_animated);\n\nfunction TestedChart({ testSeriesInfo }) {\n  const testedChart = useRef(null);\n\n  function Tooltip({ name, value }) {\n    return (\n      <div>\n        {name}: {value}\n      </div>\n    );\n  }\n\n  useLayoutEffect(() => {\n    let x = am4core.create(\"testedChartDiv\", am4charts.XYChart);\n    // data\n    const timelineData = testSeriesInfo.slice(-365).map((d) => {\n      return {\n        date: stringToDate(d.testedasof, \"dd/MM/yyyy\", \"/\"),\n        firstdoseadministered: d.firstdoseadministered,\n        seconddoseadministered: d.seconddoseadministered,\n        totaldosesadministered: d.totaldosesadministered,\n      };\n    });\n    x.data = timelineData;\n\n    let dateAxis = x.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    dateAxis.tooltipDateFormat = \"MMM dd, yyyy\";\n\n    let valueAxis = x.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    valueAxis.numberFormatter.numberFormat = \"#,###.a\";\n\n    // Gradient\n    let fillModifier = new am4core.LinearGradientModifier();\n    fillModifier.opacities = [1, 0.1];\n    fillModifier.offsets = [0, 0.5, 1];\n    fillModifier.gradient.rotation = 90;\n    // FIRST DOSE\n    let seriesFirstDose = x.series.push(new am4charts.LineSeries());\n    seriesFirstDose.name = \"First Dose\";\n    seriesFirstDose.dataFields.dateX = \"date\";\n    seriesFirstDose.dataFields.valueY = \"firstdoseadministered\";\n    seriesFirstDose.stroke = \"#ffff00\";\n    seriesFirstDose.fill = \"#ffff00\";\n\n    seriesFirstDose.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"First Dose\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesFirstDose.strokeWidth = 3;\n    seriesFirstDose.fillOpacity = 0.3;\n    seriesFirstDose.segments.template.fillModifier = fillModifier;\n\n    // SECOND DOSE\n    let seriesSecondDose = x.series.push(new am4charts.LineSeries());\n    seriesSecondDose.name = \"Second Dose\";\n    seriesSecondDose.dataFields.dateX = \"date\";\n    seriesSecondDose.dataFields.valueY = \"seconddoseadministered\";\n    seriesSecondDose.stroke = \"#39FF14\";\n    seriesSecondDose.fill = \"#39FF14\";\n\n    seriesSecondDose.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"Second Dose\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesSecondDose.strokeWidth = 3;\n    seriesSecondDose.fillOpacity = 0.3;\n    seriesSecondDose.segments.template.fillModifier = fillModifier;\n\n    // TOTAL DOSE\n    let seriesTotalDose = x.series.push(new am4charts.LineSeries());\n    seriesTotalDose.name = \"Total Dose\";\n    seriesTotalDose.dataFields.dateX = \"date\";\n    seriesTotalDose.dataFields.valueY = \"totaldosesadministered\";\n    seriesTotalDose.stroke = \"#03bd1b\";\n    seriesTotalDose.fill = \"#03bd1b\";\n    seriesTotalDose.strokeWidth = 3;\n    seriesTotalDose.fillOpacity = 0.3;\n\n    seriesTotalDose.tooltipHTML = renderToStaticMarkup(\n      <Tooltip\n        name=\"Total Dose\"\n        value=\"{valueY.value}\"\n      />\n    );\n\n    seriesTotalDose.segments.template.fillModifier = fillModifier;\n\n    x.cursor = new am4charts.XYCursor();\n\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(seriesFirstDose);\n    scrollbarX.series.push(seriesSecondDose);\n    scrollbarX.series.push(seriesTotalDose);\n    x.scrollbarX = scrollbarX;\n    // Pre Zoom\n    // x.events.on(\"ready\", function () {\n    //   dateAxis.zoomToDates(\n    //     new Date().setMonth(new Date().getMonth() - 6), // 6 months ago\n    //     new Date(),\n    //     false,\n    //     true // this makes zoom instant\n    //   );\n    // });\n    // Lengends\n    x.legend = new am4charts.Legend();\n\n    testedChart.current = x;\n\n    return () => {\n      x.dispose();\n    };\n  }, [testSeriesInfo]);\n\n  return (\n    <>\n      <span className=\"ui red ribbon label\">Tested Timeline Series</span>\n      <div className=\"ui horizontal divider\">Tested Timeline Series</div>\n      <div\n        id=\"testedChartDiv\"\n        style={{ width: \"100%\", height: \"500px\" }}\n      ></div>\n    </>\n  );\n}\n\nexport default TestedChart;\n","import _ from \"lodash\";\nimport React from \"react\";\nimport { Table, Popup, Icon } from \"semantic-ui-react\";\n\nfunction tableReducer(state, action) {\n  switch (action.type) {\n    case \"CHANGE_SORT\":\n      if (state.column === action.column) {\n        return {\n          ...state,\n          data: state.data.slice().reverse(),\n          direction: state.direction === \"ascending\" ? \"descending\" : \"ascending\",\n        };\n      }\n      return {\n        column: action.column,\n        data: _.sortBy(state.data, [action.column]),\n        direction: \"ascending\",\n      };\n    default:\n      throw new Error();\n  }\n}\n\nfunction StatewiseTable({ statewiseInfo, selectedStateInfo, handleHover, colorPalette }) {\n  const tableData = statewiseInfo\n    .filter((d) => {\n      if (d.state === \"Total\" || d.state === \"State Unassigned\") {\n        return null;\n      }\n      return d;\n    })\n    .map((d) => {\n      return {\n        active: parseInt(d.active),\n        confirmed: parseInt(d.confirmed),\n        deaths: parseInt(d.deaths),\n        recovered: parseInt(d.recovered),\n        state: d.state,\n        statecode: d.statecode,\n      };\n    });\n\n  const [state, dispatch] = React.useReducer(tableReducer, {\n    column: null,\n    data: tableData,\n    direction: null,\n  });\n  const { column, data, direction } = state;\n\n  return (\n    <>\n      <div className=\"ui red ribbon label\">\n        Table &nbsp;&nbsp;\n        <Popup\n          content={\n            <>\n              <b>Hover/Click</b> a state to interact with charts.\n              <br /> <b>Sort</b> by clicking on Table Heading.\n            </>\n          }\n          on={[\"hover\", \"click\"]}\n          popper={{\n            id: \"table-popper-container\",\n            style: { zIndex: 2000 },\n          }}\n          trigger={<Icon name=\"info circle\" />}\n          hideOnScroll\n        />\n      </div>\n\n      <div className=\"ui top right attached label\">\n        Last Updated: <div className=\"detail\">{selectedStateInfo.lastupdatedtime}</div>\n      </div>\n\n      <div className=\"ui horizontal divider\">{selectedStateInfo.state}</div>\n\n      <div style={{ overflow: \"auto\", height: \"700px\", margin: \"10px 0px\" }}>\n        <Table\n          sortable\n          celled\n          selectable\n          fixed\n          singleLine\n          unstackable\n          compact\n        >\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell\n                sorted={column === \"state\" ? direction : null}\n                onClick={() => dispatch({ type: \"CHANGE_SORT\", column: \"state\" })}\n              >\n                State/UT\n              </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === \"confirmed\" ? direction : null}\n                onClick={() =>\n                  dispatch({\n                    type: \"CHANGE_SORT\",\n                    column: \"confirmed\",\n                  })\n                }\n                style={{\n                  backgroundColor: colorPalette.confirmed.shadeLight,\n                }}\n              >\n                Confirmed\n              </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === \"active\" ? direction : null}\n                onClick={() => dispatch({ type: \"CHANGE_SORT\", column: \"active\" })}\n                style={{\n                  backgroundColor: colorPalette.active.shadeLight,\n                }}\n              >\n                Active\n              </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === \"recovered\" ? direction : null}\n                onClick={() =>\n                  dispatch({\n                    type: \"CHANGE_SORT\",\n                    column: \"recovered\",\n                  })\n                }\n                style={{\n                  backgroundColor: colorPalette.recovered.shadeLight,\n                }}\n              >\n                Recovered\n              </Table.HeaderCell>\n              <Table.HeaderCell\n                sorted={column === \"deaths\" ? direction : null}\n                onClick={() => dispatch({ type: \"CHANGE_SORT\", column: \"deaths\" })}\n                style={{\n                  backgroundColor: colorPalette.deaths.shadeLight,\n                }}\n              >\n                Deaths\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row\n              key={\"total\"}\n              disabled\n            >\n              <Table.Cell>{statewiseInfo[0].state}</Table.Cell>\n              <Table.Cell>{statewiseInfo[0].confirmed}</Table.Cell>\n              <Table.Cell>{statewiseInfo[0].active}</Table.Cell>\n              <Table.Cell>{statewiseInfo[0].recovered}</Table.Cell>\n              <Table.Cell>{statewiseInfo[0].deaths}</Table.Cell>\n            </Table.Row>\n            {data.map(({ state, statecode, active, confirmed, recovered, deaths }) => {\n              return (\n                <Table.Row\n                  key={statecode}\n                  onMouseOver={() => handleHover(statecode)}\n                  onMouseOut={() => handleHover(\"TT\")}\n                >\n                  <Table.Cell>{state}</Table.Cell>\n                  <Table.Cell\n                    style={{\n                      backgroundColor: colorPalette.confirmed.shadeLight,\n                    }}\n                  >\n                    {confirmed}\n                  </Table.Cell>\n                  <Table.Cell\n                    style={{\n                      backgroundColor: colorPalette.active.shadeLight,\n                    }}\n                  >\n                    {active}\n                  </Table.Cell>\n                  <Table.Cell\n                    style={{\n                      backgroundColor: colorPalette.recovered.shadeLight,\n                    }}\n                  >\n                    {recovered}\n                  </Table.Cell>\n                  <Table.Cell\n                    style={{\n                      backgroundColor: colorPalette.deaths.shadeLight,\n                    }}\n                  >\n                    {deaths}\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table>\n      </div>\n    </>\n  );\n}\n\nexport default StatewiseTable;\n","import React from \"react\";\nimport CountUp from \"react-countup\";\nimport { Card } from \"semantic-ui-react\";\n\nimport styled from \"styled-components\";\n\nconst StyledCard = styled(Card)`\n  border-bottom: 3px solid ${({ $color }) => $color.shadeDark || \"grey\"} !important;\n\n  & > .content {\n    background-color: ${({ $color }) => $color.shadeLight || \"#000\"} !important;\n  }\n  & > .value {\n    color: ${({ $color }) => $color.shadeDark || \"#000\"} !important;\n  }\n`;\n\nexport default function InfoBox({ title, total, color }) {\n  return (\n    <StyledCard\n      $color={color}\n      fluid\n    >\n      <div className=\"content\">\n        <div\n          className=\"ui mini statistic\"\n          style={{ width: \"100%\" }}\n        >\n          <div className=\"label\">{title}</div>\n          <div className=\"value\">\n            {isFinite(total) ? (\n              <CountUp\n                end={Number(total)}\n                duration={1}\n                separator={\",\"}\n              ></CountUp>\n            ) : (\n              0\n            )}\n          </div>\n        </div>\n      </div>\n    </StyledCard>\n  );\n}\n","import React from \"react\";\nimport { Progress } from \"semantic-ui-react\";\nimport { numbersToPercentage } from \"./../../utils/util\";\nimport styled from \"styled-components\";\n\nconst StyledProgressBar = styled(Progress)`\n  & > .bar {\n    background-color: ${(props) => props.$color || \"grey\"} !important;\n  }\n`;\n\nfunction ProgressBars({ selectedStateInfo, colorPalette }) {\n  const percentArr = numbersToPercentage([\n    selectedStateInfo.confirmed,\n    selectedStateInfo.active,\n    selectedStateInfo.recovered,\n    selectedStateInfo.deaths,\n  ]);\n  return (\n    <React.Fragment>\n      <span className=\"ui red ribbon label\">Progress Bars</span>\n      <div className=\"ui top right attached label\">\n        Last Updated: <div className=\"detail\">{selectedStateInfo.lastupdatedtime}</div>\n      </div>\n\n      <div className=\"ui horizontal divider\">{selectedStateInfo.state}</div>\n\n      <StyledProgressBar\n        percent={percentArr[0]}\n        active\n        progress\n        $color={colorPalette.confirmed.color}\n      >\n        Confirmed\n      </StyledProgressBar>\n      <StyledProgressBar\n        percent={percentArr[1]}\n        active\n        progress\n        $color={colorPalette.active.color}\n      >\n        Active\n      </StyledProgressBar>\n      <StyledProgressBar\n        percent={percentArr[2]}\n        active\n        progress\n        $color={colorPalette.recovered.color}\n      >\n        Recovered\n      </StyledProgressBar>\n      <StyledProgressBar\n        percent={percentArr[3]}\n        active\n        progress\n        $color={colorPalette.deaths.color}\n      >\n        Deaths\n      </StyledProgressBar>\n    </React.Fragment>\n  );\n}\n\nexport default ProgressBars;\n","import React, { useLayoutEffect, useRef, useState } from \"react\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_india2020High from \"@amcharts/amcharts4-geodata/india2020High\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { Popup, Icon } from \"semantic-ui-react\";\n\n/* Enable theme(s) */\nam4core.useTheme(am4themes_animated);\nconst caseTypeOptions = [\n  { key: 1, text: \"Confirmed\", value: \"confirmed\" },\n  { key: 2, text: \"Active\", value: \"active\" },\n  { key: 3, text: \"Recovered\", value: \"recovered\" },\n  { key: 4, text: \"Deaths\", value: \"deaths\" },\n];\nfunction Map({ handleHover, statewiseInfo, colorPalette }) {\n  const [caseType, setCaseType] = useState(\"confirmed\");\n\n  function handleCaseTypeChange(e) {\n    console.log(e.target.value);\n    setCaseType(e.target.value);\n  }\n\n  const mapRef = useRef(null);\n  const lastUpdateRef = useRef(null);\n\n  useLayoutEffect(() => {\n    const statecodes = [\n      \"AN\",\n      \"AP\",\n      \"AR\",\n      \"AS\",\n      \"BR\",\n      \"CH\",\n      \"CT\",\n      \"DN\",\n      \"DL\",\n      \"GA\",\n      \"GJ\",\n      \"HR\",\n      \"HP\",\n      \"JK\",\n      \"JH\",\n      \"KA\",\n      \"KL\",\n      \"LA\",\n      \"LD\",\n      \"MP\",\n      \"MH\",\n      \"MN\",\n      \"ML\",\n      \"MZ\",\n      \"NL\",\n      \"OR\",\n      \"PY\",\n      \"PB\",\n      \"RJ\",\n      \"SK\",\n      \"TN\",\n      \"TG\",\n      \"TR\",\n      \"UP\",\n      \"UT\",\n      \"WB\",\n    ];\n    const getMapData = (info) => {\n      return info\n        .slice(1)\n        .filter((s) => statecodes.indexOf(s.statecode) !== -1)\n        .map((s) => {\n          if (s.statecode === \"LA\") {\n            return {\n              id: `IN-LK`,\n              state: s.state,\n              value: s[caseType],\n              lastupdatedtime: s.lastupdatedtime,\n            };\n          }\n          if (s.statecode === \"DN\") {\n            return {\n              id: `IN-DNDD`,\n              state: s.state,\n              value: s[caseType],\n              lastupdatedtime: s.lastupdatedtime,\n            };\n          }\n          return {\n            id: `IN-${s.statecode}`,\n            state: s.state,\n            value: s[caseType],\n            lastupdatedtime: s.lastupdatedtime,\n          };\n        });\n    };\n\n    let map = am4core.create(\"mapDiv\", am4maps.MapChart);\n\n    // Set values for each state\n    let data = getMapData(statewiseInfo);\n    // Set map definition\n    map.geodata = am4geodata_india2020High;\n    //map.projection = new am4maps.projections.Miller();\n    // Set projection\n    map.projection = new am4maps.projections.Mercator();\n    // this is map polygon\n    let polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    // Make map load polygon data (state shapes and names) from GeoJSON\n    polygonSeries.useGeodata = true;\n\n    //Set min/max fill color for each area\n    polygonSeries.heatRules.push({\n      property: \"fill\",\n      target: polygonSeries.mapPolygons.template,\n      min: am4core.color(colorPalette[caseType][\"shadeLight\"]),\n      max: am4core.color(colorPalette[caseType][\"shadeDark\"]),\n      logarithmic: true,\n    });\n\n    polygonSeries.data = data;\n\n    // hover and detail tool\n    let polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}: {value}\";\n    polygonTemplate.nonScalingStroke = true;\n    polygonTemplate.strokeWidth = 0.5;\n\n    // Create hover state and set alternative fill color\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = am4core.color(\"#000000\");\n\n    // Set up heat legend\n    let heatLegend = map.createChild(am4maps.HeatLegend);\n    heatLegend.series = polygonSeries;\n    heatLegend.align = \"right\";\n    heatLegend.valign = \"bottom\";\n    heatLegend.height = am4core.percent(80);\n    heatLegend.orientation = \"vertical\";\n    heatLegend.valign = \"middle\";\n    heatLegend.marginRight = am4core.percent(1);\n    heatLegend.valueAxis.renderer.opposite = true;\n    heatLegend.valueAxis.renderer.dx = -22;\n    heatLegend.valueAxis.strictMinMax = false;\n    heatLegend.valueAxis.fontSize = 9;\n    heatLegend.valueAxis.logarithmic = true;\n\n    // heat legend behavior\n    function handleHover(column) {\n      if (!isNaN(column.dataItem.value)) {\n        lastUpdateRef.current.innerText = column.dataItem.dataContext.lastupdatedtime;\n        heatLegend.valueAxis.showTooltipAt(column.dataItem.value);\n      } else {\n        heatLegend.valueAxis.hideTooltip();\n      }\n    }\n    polygonSeries.mapPolygons.template.events.on(\"over\", function (event) {\n      handleHover(event.target);\n    });\n\n    polygonSeries.mapPolygons.template.events.on(\"hit\", function (event) {\n      console.log(\"hit\", event.target);\n      handleHover(event.target);\n    });\n\n    polygonSeries.mapPolygons.template.events.on(\"out\", function (event) {\n      lastUpdateRef.current.innerText = \"Select a State\";\n      heatLegend.valueAxis.hideTooltip();\n    });\n    mapRef.current = map;\n    return () => {\n      map.dispose();\n    };\n  }, [statewiseInfo, caseType, colorPalette]);\n  return (\n    <>\n      <div className=\"ui red ribbon label\">\n        Map &nbsp;&nbsp;\n        <Popup\n          content={\n            <>\n              <b>Select</b> case type to interact.\n              <br /> <b>Hover/Click</b> a state to see details.\n            </>\n          }\n          on={[\"hover\", \"click\"]}\n          popper={{ id: \"map-popper-container\", style: { zIndex: 2000 } }}\n          trigger={<Icon name=\"info circle\" />}\n          hideOnScroll\n        />\n      </div>\n\n      <div className=\"ui top right attached label\">\n        Last Updated:{\" \"}\n        <div\n          className=\"detail\"\n          ref={lastUpdateRef}\n        >\n          Select a State\n        </div>\n      </div>\n\n      <div className=\"ui horizontal divider\">{caseType.toUpperCase()}</div>\n      <div style={{ height: \"50px\" }}>\n        <select\n          style={{ float: \"left\" }}\n          value={caseType}\n          onChange={handleCaseTypeChange}\n          className=\"ui dropdown\"\n        >\n          {caseTypeOptions.map((e) => {\n            return (\n              <option\n                key={e.key}\n                value={e.value}\n              >\n                {e.text}\n              </option>\n            );\n          })}\n        </select>\n      </div>\n      <div\n        id=\"mapDiv\"\n        style={{ height: \"660px\" }}\n      ></div>\n    </>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport { Placeholder } from \"semantic-ui-react\";\n\nconst PlaceholderComment = ({ num = 1 }) => {\n  let placeholderComments = Array.from(Array(num), (e, i) => {\n    return (\n      <div key={i}>\n        <Placeholder.Line length=\"very short\" />\n        <Placeholder.Line length=\"full\" />\n      </div>\n    );\n  });\n\n  return <Placeholder fluid>{placeholderComments}</Placeholder>;\n};\nexport default PlaceholderComment;\n","export default __webpack_public_path__ + \"static/media/covid-19.cc6508d0.svg\";","const chartTheme = {\n  first: {\n    confirmed: {\n      type: \"confirmed\",\n      color: \"#db2828\",\n      shadeLight: \"#fbedec\",\n      shadeDark: \"#db2828\",\n      name: \"red\",\n    },\n    active: {\n      type: \"active\",\n      color: \"#2185d0\",\n      shadeLight: \"#ecf5fc\",\n      shadeDark: \"#2185d0\",\n      name: \"blue\",\n    },\n    recovered: {\n      type: \"recovered\",\n      color: \"#21ba45\",\n      shadeLight: \"#ecfcf1\",\n      shadeDark: \"#21ba45\",\n      name: \"green\",\n    },\n    deaths: {\n      type: \"deaths\",\n      color: \"#767676\",\n      shadeLight: \"#f4f4f4\",\n      shadeDark: \"#767676\",\n      name: \"grey\",\n    },\n  },\n  second: {\n    confirmed: {\n      type: \"confirmed\",\n      color: \"#bf00e6\",\n      shadeLight: \"#fbe5ff\",\n      shadeDark: \"#bf00e6\",\n      name: \"red\",\n    },\n    active: {\n      type: \"active\",\n      color: \"#0c5cb3\",\n      shadeLight: \"#ebf4fe\",\n      shadeDark: \"#0c5cb3\",\n      name: \"blue\",\n    },\n    recovered: {\n      type: \"recovered\",\n      color: \"#1b9838\",\n      shadeLight: \"#e9fbee\",\n      shadeDark: \"#1b9838\",\n      name: \"green\",\n    },\n    deaths: {\n      type: \"deaths\",\n      color: \"#ffc21a\",\n      shadeLight: \"#fff8e5\",\n      shadeDark: \"#ffc21a\",\n      name: \"grey\",\n    },\n  },\n  third: {\n    confirmed: {\n      type: \"confirmed\",\n      color: \"#ff0592\",\n      shadeLight: \"#ffbee3\",\n      shadeDark: \"#ff0592\",\n      name: \"red\",\n    },\n    active: {\n      type: \"active\",\n      color: \"#4d3664\",\n      shadeLight: \"#bab5f6\",\n      shadeDark: \"#4d3664\",\n      name: \"blue\",\n    },\n    recovered: {\n      type: \"recovered\",\n      color: \"#26baee\",\n      shadeLight: \"#9fe8fa\",\n      shadeDark: \"#26baee\",\n      name: \"green\",\n    },\n    deaths: {\n      type: \"deaths\",\n      color: \"#c7004c\",\n      shadeLight: \"#ffaaaa\",\n      shadeDark: \"#c7004c\",\n      name: \"grey\",\n    },\n  },\n  fourth: {\n    confirmed: {\n      type: \"confirmed\",\n      color: \"#78a40e\",\n      shadeLight: \"#f7fde8\",\n      shadeDark: \"#78a40e\",\n      name: \"red\",\n    },\n    active: {\n      type: \"active\",\n      color: \"#a7490b\",\n      shadeLight: \"#fdf0e7\",\n      shadeDark: \"#a7490b\",\n      name: \"blue\",\n    },\n    recovered: {\n      type: \"recovered\",\n      color: \"#2b5543\",\n      shadeLight: \"#eef6f3\",\n      shadeDark: \"#2b5543\",\n      name: \"green\",\n    },\n    deaths: {\n      type: \"deaths\",\n      color: \"#bb2b79\",\n      shadeLight: \"#faeaf3\",\n      shadeDark: \"#bb2b79\",\n      name: \"grey\",\n    },\n  },\n  fifth: {\n    confirmed: {\n      type: \"confirmed\",\n      color: \"#4902e3\",\n      shadeLight: \"#eee6ff\",\n      shadeDark: \"#4902e3\",\n      name: \"red\",\n    },\n    active: {\n      type: \"active\",\n      color: \"#db0aae\",\n      shadeLight: \"#fee7f9\",\n      shadeDark: \"#db0aae\",\n      name: \"blue\",\n    },\n    recovered: {\n      type: \"recovered\",\n      color: \"#db0a0a\",\n      shadeLight: \"#fee7e7\",\n      shadeDark: \"#db0a0a\",\n      name: \"green\",\n    },\n    deaths: {\n      type: \"deaths\",\n      color: \"#cddb0a\",\n      shadeLight: \"#fcfee7\",\n      shadeDark: \"#cddb0a\",\n      name: \"grey\",\n    },\n  },\n};\n\nexport default chartTheme;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Segment, Divider, Button, Label } from \"semantic-ui-react\";\nimport { FaPalette } from \"react-icons/fa\";\nimport LazyLoad from \"./../../hooks/LazyLoad\";\nimport { getCovidData } from \"./../../services/covidData.api\";\n\nimport LineChart from \"./../../components/Charts/LineChart\";\nimport DonutChart from \"./../../components/Charts/DonutChart\";\nimport TestedChart from \"./../../components/Charts/TestedChart\";\nimport StatewiseTable from \"./../../components/Table/Table\";\nimport InfoBox from \"./../../components/InfoBox/InfoBox\";\nimport ProgressBars from \"./../../components/ProgressBars/ProgressBars\";\nimport Map from \"./../../components/Map/Map\";\nimport PlaceholderComment from \"./../../components/PlaceholderComment/PlaceholderComment\";\nimport PlaceholderImage from \"./../../components/PlaceholderImage/PlaceholderImage\";\n\nimport covidLogo from \"./../../assets/covid-19.svg\";\n\nimport chartTheme from \"./chartTheme\";\n\nimport \"./Dashboard.css\";\nimport { Link } from \"react-router-dom\";\n\nfunction Dashboard() {\n  const [statewiseInfo, setStatewiseInfo] = useState(null);\n  const [selectedStateInfo, setSelectedStateInfo] = useState(null);\n  const [casesInfo, setCasesInfo] = useState(null);\n  const [testSeriesInfo, setTestSeriesInfo] = useState(null);\n  const [colorPalette, setColorPalette] = useState({\n    ...chartTheme[\"first\"],\n  });\n  const [loading, setLoading] = useState(true);\n\n  async function getInfo() {\n    try {\n      let result = await getCovidData();\n\n      const { cases_time_series, statewise, tested } = result;\n      setStatewiseInfo(statewise);\n\n      setSelectedStateInfo(statewise[0]);\n\n      setCasesInfo(cases_time_series);\n\n      setTestSeriesInfo(tested);\n\n      setLoading(false);\n    } catch (e) {\n      console.error(\"There has been a problem with your fetch operation:\", e);\n    }\n  }\n\n  useEffect(() => {\n    getInfo();\n  }, []);\n\n  let timerId = -1;\n  const handleHover = (statecode) => {\n    if (timerId !== -1) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(() => {\n      setSelectedStateInfo(statewiseInfo.find((i) => i.statecode === statecode));\n    }, 200);\n  };\n\n  const changeTheme = (themeName) => {\n    setColorPalette(chartTheme[themeName]);\n  };\n\n  return (\n    <div id=\"dashboard\">\n      <div className=\"ui inverted vertical masthead center aligned segment\">\n        <img\n          className=\"ui tiny centered image\"\n          src={covidLogo}\n          alt=\"icon\"\n          width=\"72\"\n          height=\"57\"\n          style={{ marginBottom: \"15px\" }}\n        />\n\n        <div className=\"ui text container\">\n          <h1 className=\"ui inverted header\">India's Covid-19 Tracker</h1>\n          <p>\n            Below are some interactive charts, information tiles, map ,table etc. which graphically represents real-time\n            accurate statistics of India.\n          </p>\n          <div className=\"ui divider\"></div>\n\n          <p>\n            <a\n              className=\"ignored\"\n              href=\"https://api.covid19india.org\"\n              target=\"blank\"\n            >\n              <i className=\"attention icon\"></i>\n              Data Source\n            </a>\n          </p>\n\n          <Button\n            animated\n            primary\n            as={Link}\n            to=\"/\"\n          >\n            <Button.Content visible>Home</Button.Content>\n            <Button.Content hidden>\n              <i className=\"arrow circle left icon\"></i>\n            </Button.Content>\n          </Button>\n        </div>\n\n        <Label.Group\n          circular\n          style={{ cursor: \"pointer\", marginTop: \"2em\" }}\n        >\n          <Label>\n            {\" \"}\n            <FaPalette />\n          </Label>\n\n          <Label\n            color={\"red\"}\n            onClick={() => changeTheme(\"first\")}\n          >\n            1\n          </Label>\n          <Label\n            color={\"blue\"}\n            onClick={() => changeTheme(\"second\")}\n          >\n            2\n          </Label>\n          <Label\n            color={\"olive\"}\n            onClick={() => changeTheme(\"third\")}\n          >\n            3\n          </Label>\n          <Label\n            color={\"pink\"}\n            onClick={() => changeTheme(\"fourth\")}\n          >\n            4\n          </Label>\n          <Label\n            color={\"yellow\"}\n            onClick={() => changeTheme(\"fifth\")}\n          >\n            5\n          </Label>\n        </Label.Group>\n      </div>\n\n      <Grid\n        stackable\n        verticalAlign=\"top\"\n        padded\n      >\n        <Grid.Row\n          centered\n          columns={2}\n        >\n          <Grid.Column width={8}>\n            <Grid.Row style={{ margin: \"1em 0em\" }}>\n              <Segment raised>\n                {loading ? (\n                  <PlaceholderImage />\n                ) : (\n                  <DonutChart\n                    selectedStateInfo={selectedStateInfo}\n                    colorPalette={colorPalette}\n                  ></DonutChart>\n                )}\n              </Segment>\n            </Grid.Row>\n            <Grid.Row style={{ margin: \"1em 0em\" }}>\n              <Segment raised>\n                {loading ? (\n                  <PlaceholderImage />\n                ) : (\n                  <LazyLoad>\n                    <StatewiseTable\n                      selectedStateInfo={selectedStateInfo}\n                      statewiseInfo={statewiseInfo}\n                      handleHover={handleHover}\n                      colorPalette={colorPalette}\n                    ></StatewiseTable>\n                  </LazyLoad>\n                )}\n              </Segment>\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={8}>\n            <Grid.Row>\n              <Segment\n                raised\n                style={{ margin: \"1em 0em\" }}\n              >\n                {loading ? (\n                  <PlaceholderImage />\n                ) : (\n                  <LazyLoad>\n                    <span className=\"ui red ribbon label\">Statistics</span>\n                    <div className=\"ui top right attached label\">\n                      Last Updated: <div className=\"detail\">{selectedStateInfo.lastupdatedtime}</div>\n                    </div>\n\n                    <div className=\"ui horizontal divider\">{selectedStateInfo.state}</div>\n\n                    <Grid\n                      columns={1}\n                      stackable\n                      padded=\"vertically\"\n                    >\n                      <Grid.Row\n                        centered\n                        columns={2}\n                        verticalAlign=\"middle\"\n                      >\n                        <Grid.Column width={8}>\n                          <InfoBox\n                            title={\"CONFIRMED\"}\n                            total={selectedStateInfo.confirmed}\n                            color={colorPalette.confirmed}\n                          ></InfoBox>\n\n                          <InfoBox\n                            title={\"ACTIVE\"}\n                            total={selectedStateInfo.active}\n                            color={colorPalette.active}\n                          ></InfoBox>\n                        </Grid.Column>\n                        <Grid.Column width={8}>\n                          <InfoBox\n                            title={\"RECOVERED\"}\n                            total={selectedStateInfo.recovered}\n                            color={colorPalette.recovered}\n                          ></InfoBox>\n\n                          <InfoBox\n                            title={\"DECEASED\"}\n                            total={selectedStateInfo.deaths}\n                            color={colorPalette.deaths}\n                          ></InfoBox>\n                        </Grid.Column>\n                      </Grid.Row>\n                    </Grid>\n                  </LazyLoad>\n                )}\n              </Segment>\n              <Segment\n                raised\n                style={{ margin: \"1em 0em\" }}\n              >\n                {loading ? (\n                  <PlaceholderComment num={4} />\n                ) : (\n                  <LazyLoad>\n                    <ProgressBars\n                      selectedStateInfo={selectedStateInfo}\n                      colorPalette={colorPalette}\n                    />\n                  </LazyLoad>\n                )}\n              </Segment>\n            </Grid.Row>\n            <Grid.Row style={{ margin: \"1em 0em\" }}>\n              <Segment raised>\n                {loading ? (\n                  <PlaceholderImage />\n                ) : (\n                  <LazyLoad>\n                    <Map\n                      statewiseInfo={statewiseInfo}\n                      handleHover={handleHover}\n                      colorPalette={colorPalette}\n                    ></Map>\n                  </LazyLoad>\n                )}\n              </Segment>\n            </Grid.Row>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n\n      <Grid\n        stackable\n        verticalAlign=\"top\"\n      >\n        <Grid.Row\n          centered\n          columns={2}\n        >\n          <Divider\n            horizontal\n            style={{ margin: \"0px 5em\" }}\n          >\n            <h3>Timeline Series</h3>\n          </Divider>\n          <Grid.Column\n            width={7}\n            style={{ margin: \"1em 0em\" }}\n          >\n            <Segment raised>\n              {loading ? (\n                <PlaceholderImage />\n              ) : (\n                <LazyLoad rootMargin={\"200px\"}>\n                  <TestedChart testSeriesInfo={testSeriesInfo} />\n                </LazyLoad>\n              )}\n            </Segment>\n          </Grid.Column>\n          <Grid.Column\n            width={7}\n            style={{ margin: \"1em 0em\" }}\n          >\n            <Segment raised>\n              {loading ? (\n                <PlaceholderImage />\n              ) : (\n                <LazyLoad rootMargin={\"200px\"}>\n                  <LineChart casesInfo={casesInfo}></LineChart>\n                </LazyLoad>\n              )}\n            </Segment>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n\n      <div style={{ margin: \"0px 5em\", fontSize: \"0.5rem\" }}>\n        <Divider horizontal>\n          <img\n            className=\"ui tiny centered image\"\n            src={covidLogo}\n            alt=\"icon\"\n            style={{ width: \"40px\", marginBottom: \"5px\" }}\n          />\n          Covid-19 Tracker\n        </Divider>\n        <div\n          role=\"list\"\n          className=\"ui horizontal right floated list\"\n        >\n          <a\n            role=\"listitem\"\n            className=\"item\"\n            target=\"blank\"\n            href=\"https://github.com/singhAmandeep007/covid-tracker-india\"\n          >\n            GitHub\n          </a>\n          <a\n            role=\"listitem\"\n            className=\"item\"\n            target=\"blank\"\n            href=\"https://www.linkedin.com/in/singhamandeep007/\"\n          >\n            LinkedIn\n          </a>\n        </div>\n        <div\n          role=\"list\"\n          className=\"ui horizontal list\"\n        >\n          <span\n            role=\"listitem\"\n            className=\"item\"\n          >\n            By Amandeep\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","export function getCovidData() {\n  const api1 = \"https://data.covid19india.org/data.json\";\n  const api2 = process.env.REACT_APP_PUBLIC_URL + \"data.json\";\n\n  return Promise.allSettled([\n    fetch(api1).then((response) => {\n      if (!response.ok) {\n        throw new Error(\"First API failed\");\n      }\n      return response.json();\n    }),\n    fetch(api2).then((response) => {\n      if (!response.ok) {\n        throw new Error(\"Second API failed\");\n      }\n      return response.json();\n    }),\n  ]).then((results) => {\n    const [result1, result2] = results;\n\n    if (result1.status === \"fulfilled\") {\n      return result1.value;\n    } else if (result2.status === \"fulfilled\") {\n      return result2.value;\n    } else {\n      throw new Error(\"Both APIs failed\");\n    }\n  });\n}\n"],"sourceRoot":""}